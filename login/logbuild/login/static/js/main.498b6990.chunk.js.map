{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CryptoJS","require","chars","publicKey","App","state","arr","Pressme","e","currentState","String","key","http","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","window","location","replace","payload","encrypt","SHA256","join","toString","enc","Hex","send","length","shift","push","toUpperCase","setState","console","log","keyLength","randomstring","i","rnum","Math","floor","random","substring","dataString","this","generateKey","aesEncrypted","AES","aesKey","iv","encryptedMessage","rsaEncrypt","JSEncrypt","setPublicKey","className","onKeyDown","tabIndex","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAKIA,EAAWC,EAAQ,IAEhBC,EAAK,+EAILC,EAAS,4zBAqIDC,E,2MApHbC,MAAQ,CAENC,IAAK,I,EAoDPC,QAAU,SAACC,GAIT,IAAIC,EAAe,EAAKJ,MAAMC,IAE9B,GAAsB,UAAlBI,OAAOF,EAAEG,KAAkB,CAE7B,IAAMC,EAAO,IAAIC,eACjBD,EAAKE,KAAK,OAAQ,0BAClBF,EAAKG,iBAAiB,eAAgB,oBAEtCH,EAAKI,mBAAqB,WACA,IAApBJ,EAAKK,YAAoC,MAAhBL,EAAKM,QAChCC,OAAOC,SAASC,QAAQ,gCAK5B,IAAIC,EAAU,EAAKC,QAAQvB,EAASwB,OAAOd,OAAO,EAAKL,MAAMC,IAAImB,KAAK,MAAMC,SAAS1B,EAAS2B,IAAIC,KAAMzB,GAGxGS,EAAKiB,KAAKP,QAGyB,KAA1B,EAAKjB,MAAMC,IAAIwB,QAGxB,EAAKzB,MAAMC,IAAIyB,QACftB,EAAauB,KAAKtB,OAAOF,EAAEG,KAAKsB,eAChC,EAAKC,SAAS,CAAE5B,IAAKG,MAIrBA,EAAauB,KAAKtB,OAAOF,EAAEG,KAAKsB,eAChC,EAAKC,SAAS,CAAE5B,IAAKG,KAKvB0B,QAAQC,IAAI5B,EAAEG,IAAK,EAAKN,MAAMC,IAAK,EAAKD,MAAMC,IAAIwB,S,2EAvF1CO,GAIZ,IAFA,IAAIC,EAAe,GAEVC,EAAE,EAAGA,EAAIF,EAAWE,IAAK,CAChC,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWzC,EAAM4B,QAC5CQ,GAAgBpC,EAAM0C,UAAUJ,EAAKA,EAAK,GAE5C,OAAOF,I,8BAGCO,EAAY1C,GAElB,IAAIQ,EAAMmC,KAAKC,YAAY,IAMvBC,EAAehD,EAASiD,IAAI1B,QAAQsB,EAAYlC,GAMhDuC,EAASF,EAAarC,IAAM,MAAQqC,EAAaG,GAGjDC,EAAmBJ,EAAatB,WAGhC2B,EAAa,IAAIC,YASrB,OANAD,EAAWE,aAAapD,GAGLkD,EAAW9B,QAAQ2B,GAET,MAAQE,I,+BA2DnC,OAEE,yBAAKI,UAAU,MAAMC,UAAWX,KAAKvC,QAASmD,SAAS,U,GA7G3CC,aCdEC,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.498b6990.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {JSEncrypt} from \"jsencrypt\";\r\n\r\n\r\nvar CryptoJS = require(\"crypto-js\");\r\n\r\n const chars =\r\n`0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmn\r\n opqrstuvwxyz*&-%/!?*+=()`;\r\n\r\n const publicKey = `-----BEGIN PUBLIC KEY-----\r\n MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA1hzREvR95DPQT2GqHPK4\r\n L2gMGjJXMVWnuGE2oiq2XXldZ66yJONlIgQygVl3e7fxrcef7BYtUwLm7Y5amlf1\r\n pigxsqjzE5z7JR7mFY0mxEPOBTy/RwWmQt5a/FmDUL2RITjDDtgMdwiG4kxW+5+g\r\n Qb2FU3++Y1128XUkFRAk1BkxFgYpme2E44EMKtreLvNyNLYY97I9nqSMhU8aPPsw\r\n vOznKtfrf3h97EsOooGKDneAU0cXyaqzkHZudEslHY1tAC9DZeIUni+Vv/7XphfY\r\n PtlqyqW5OR2/pjAggRkp857mBHBqBd91TYZw2ZsD3AHS7kL86JGAElF8WIkVxFyl\r\n mTQn/soRb63c+SGuXXsn5EqSji9cVfP59/ec7YGWlHFDFxHfLC1BGnLcVFJgLTW0\r\n qRQ4Cuy8Bvttey3bFnaCDDaOOH3NkMh8Vc7AfUzJEjZtxv0+rXiPUbiJSZoRUdNZ\r\n pc1gWD8tUenPA7F/aGPbcIziDVEmx1YWR/HSaU6J/ZTO/hmxI4VJyu559IDVY6zr\r\n e4kCw7WXYzShaS/zUyFSiZ0y2a4kU+qIH4q/UNi03gudGc1KeoukmPPiAm6fpOJH\r\n VeoypUMV3147fQtoGLCrYFJv9+3dhNE38PgF6atWoOt2GQjoB3S/vi7WlWDlBXw5\r\n sc8x6LHhFRCcwDaAhjDg/wkCAwEAAQ==\r\n -----END PUBLIC KEY-----`;\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n\r\n    arr: []\r\n  };\r\n\r\n\r\n\r\ngenerateKey(keyLength){\r\n\r\nvar randomstring = '';\r\n\r\nfor (var i=0; i < keyLength; i++) {\r\n  var rnum = Math.floor(Math.random() * chars.length);\r\n  randomstring += chars.substring(rnum,rnum+1);\r\n}\r\nreturn randomstring;\r\n};\r\n\r\nencrypt(dataString, publicKey) {\r\n \r\n  var key = this.generateKey(50);\r\n \r\n  // (the cryptojs library will generate its own 256bit key different than the key passed). \r\n  //Key is basically passphrase, which gets turned into proper length key with IV/Salt\r\n\r\n\r\n  var aesEncrypted = CryptoJS.AES.encrypt(dataString, key);\r\n\r\n  // get the symmetric AES key and initialization vector(Nonce) which are both hex encoded\r\n  // and concatenate them into one string\r\n  // ::: can be used as a delimiter on the go server to split\r\n\r\n  var aesKey = aesEncrypted.key + \":::\" + aesEncrypted.iv;\r\n\r\n  // the data is base64 encoded \r\n  var encryptedMessage = aesEncrypted.toString();\r\n\r\n \r\n  var rsaEncrypt = new JSEncrypt();\r\n\r\n  // Set RSA public key\r\n  rsaEncrypt.setPublicKey(publicKey);\r\n\r\n  // Encrypt the AES key & iv with RSA public key\r\n  var encryptedKey = rsaEncrypt.encrypt(aesKey);\r\n  // and concatenate our payload message\r\n  var payload = encryptedKey + \":::\" + encryptedMessage;\r\n  return payload;\r\n\r\n};\r\n\r\n\r\n\r\n\r\n  Pressme = (e) => {\r\n\r\n\r\n   \r\n    var currentState = this.state.arr;\r\n\r\n    if (String(e.key) === \"Enter\") {\r\n\r\n      const http = new XMLHttpRequest();\r\n      http.open(\"POST\", \"http://localhost:5000/\");\r\n      http.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n      http.onreadystatechange = () => {\r\n        if (http.readyState === 4 && http.status === 200) {\r\n          window.location.replace(\"http://localhost:5000/dash/\");\r\n        }\r\n        return\r\n      }\r\n      \r\n      var payload = this.encrypt(CryptoJS.SHA256(String(this.state.arr.join(\"\"))).toString(CryptoJS.enc.Hex), publicKey)\r\n     // var message = \"THIS IS A GAY MESSAGE\"\r\n    //  var payload = this.encrypt(message.toString(CryptoJS.enc.Hex), publicKey)\r\n      http.send(payload);\r\n\r\n\r\n    } else if (this.state.arr.length === 11) {\r\n\r\n  \r\n      this.state.arr.shift();\r\n      currentState.push(String(e.key).toUpperCase());\r\n      this.setState({ arr: currentState });\r\n\r\n    } else  {\r\n      \r\n      currentState.push(String(e.key).toUpperCase());\r\n      this.setState({ arr: currentState });\r\n    }\r\n\r\n    \r\n\r\n    console.log(e.key, this.state.arr, this.state.arr.length)\r\n\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n\r\n      <div className=\"App\" onKeyDown={this.Pressme} tabIndex=\"0\" >\r\n\r\n\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}